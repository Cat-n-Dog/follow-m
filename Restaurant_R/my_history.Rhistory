library('lubridate')
install.packages("lubridate")
install.packages("dplyr")
install.packages("dplyr")
install.packages("glmnet")
install.packages("mgcv")
library('lubridate')
library('dplyr')
library('glmnet')
train_df <- read.csv(file = 'train.csv')
train_df$Open.Date <- lubridate::mdy(train_df$Open.Date)
class(train_df)
str(train_df)
train_df <- train_df %>%
dplyr::mutate(Open.Year = year(Open.Date), Open.Month = month(Open.Date),
City2 = ifelse(test = City.Group == 'Big Cities', yes = as.character(City), no = 0))
train_df$City2 <- as.factor(train_df$City2)
train_df$Open.Year <- as.factor(train_df$Open.Year)
train_df$Open.Month <- as.factor(train_df$Open.Month)
#train_df %>% group_by(City.Group) %>% summarise(count = n())
train_tbl_df <- tbl_df(train_df)
# train_tbl_df <- train_tbl_df %>% filter(Id != 16)
train_tbl_df
dir(train_tbl_df)
str(train_tbl_df)
levels(train_tbl_df$City2)
install.packages("ggplot2")
install.packages("ggvis")
library(ggplot2)
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_line()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point() + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point() + theme_bw()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point() + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(aes(size=12)) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(aes(color=City2)) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(aes(shape=City2)) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(size=6) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(size=3) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(size=4) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(aes(shape=City2),size=4) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(aes(shape=City2), size=3.5) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(aes(color=City2), size=3.5) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(aes(color=City2, shape=City2), size=3.5) + theme_minimal()
ggplot2::ggplot(train_tbl_df, aes(x=Open.Date , y=revenue)) + geom_point(aes(color=City2, shape=City2), size=3.5) + theme_minimal() + geom_smooth()
str(train_tbl_df)
ggplot(train_tbl_df, aes(x=P1, y=revenue)) + geom_point(aes(color=City2, shape=City2), size=3.5) + theme_minimal()
ggplot(train_tbl_df[ train_tbl_df$City2 != '0' ], aes(x=P1, y=revenue)) + geom_point(aes(color=City2, shape=City2), size=3.5) + theme_minimal()
ggplot(filter(train_tbl_df, City2 != '0'), aes(x=P1, y=revenue)) + geom_point(aes(color=City2, shape=City2), size=3.5) + theme_minimal()
install.packages("rpart.plot")
install.packages("caret")
install.packages("ISLR")
install.packages("tree")
install.packages("randomForest")
library(ggplot2)
ggplot(train_df, aes(x=Open.Date, y=revenue)) + geom_point()
train_df_wo_3_outliers <- train_df %>% filter(revenue < 1e7)
ggplot(train_df_wo_3_outliers, aes(x=Open.Date, y=revenue)) + geom_point()
str(train_df_wo_3_outliers)
library(tree)
tree.model <- tree(revenue ~ . - Open.Date - City - City.Group, data = train_df_wo_3_outliers)
tree.model
plot(tree.model)
text(tree.model)
summary(tree.model)
tree.model$frame$dev
class(tree.model)
cv.tree.model <- cv.tree(tree.model, FUN = prune.misclass, K = 5)
cv.tree.model <- cv.tree(tree.model, K = 5)
plot(cv.tree.model$size, cv.tree.model$dev, type = 'b')
pruned.model <- prune.tree(tree = tree.model, best = 5)
plot(pruned.model)
text(pruned.model)
predict(pruned.model)
pruned.yhat <- predict(pruned.model)
tree.yhat <- predict(tree.model)
mean((pruned.yhat - train_df_wo_3_outliers$revenue)^2)
mean((tree.yhat - train_df_wo_3_outliers$revenue)^2)
sqrt(mean((tree.yhat - train_df_wo_3_outliers$revenue)^2))
sqrt(mean((pruned.yhat - train_df_wo_3_outliers$revenue)^2))
install.packages("gbm")
train <- sample(x = 1:134, size = 100)
tree.100.model <- tree(revenue ~ . - Open.Date - City - City.Group, data = train_df_wo_3_outliers, subset = train)
pruned.100.tree <- prune.tree(tree.100.model, best = 5)
yhat.test.train_df <- predict(pruned.100.tree, newdata = train_df_wo_3_outliers[-train, ])
y.test.train_df <- train_df_wo_3_outliers[-train, 'revenue']
sqrt(mean((yhat.test.train_df - y.test.train_df)^2))
yhat.100.test.train_df <- predict(tree.100.model, newdata = train_df_wo_3_outliers[-train, ])
sqrt(mean((yhat.100.test.train_df - y.test.train_df)^2))
library(randomForest)
rf.100 <- randomForest(revenue ~ . - Open.Date - City - City.Group, data = train_df_wo_3_outliers, subset = train, importance = TRUE)
yhat.rf <- predict(rf.100, newdata = train_df_wo_3_outliers[-train,])
sqrt(mean((yhat.rf - y.test.train_df)^2))
rf.100
importance(rf.100)
rf.100 <- randomForest(revenue ~ . - Open.Date - City - City.Group - Id, data = train_df_wo_3_outliers, subset = train, importance = TRUE)
yhat.rf <- predict(rf.100, newdata = train_df_wo_3_outliers[-train,])
sqrt(mean((yhat.rf - y.test.train_df)^2))
library(gbm)
boost.100 <- gbm(revenue ~ . - Open.Date - City - City.Group - Id, data=train_df_wo_3_outliers[train,], distribution = 'gaussian', n.trees = 5000, interaction.depth = 5)
summary(boost.100)
yhat.boost <- predict(boost.100, newdata = train_df_wo_3_outliers[-train,], n.trees=5000)
sqrt(mean((yhat.boost - y.test.train_df)^2))
test_df <- read.csv(file = 'test.csv')
test_df$Open.Date <- lubridate::mdy(test_df$Open.Date)
test_df <- test_df %>%
dplyr::mutate(Open.Year = year(Open.Date), Open.Month = month(Open.Date),
City2 = ifelse(test = City.Group == 'Big Cities', yes = as.character(City), no = 0))
test_df$City2 <- as.factor(test_df$City2)
test_df$Open.Year <- as.factor(test_df$Open.Year)
test_df$Open.Month <- as.factor(test_df$Open.Month)
#train_df %>% group_by(City.Group) %>% summarise(count = n())
test_tbl_df <- tbl_df(test_df)
str(test_df)
submission <- predict(rf.100, newdata = test_df)
factor_change <- function(f) {
if (f == '1995') {
return(factor('1996'))
}
if (f == '2001') {
return(factor('2002'))
}
if (f == '2003') {
return(factor('2004'))
}
}
good <- test_tbl_df_pred %>%
dplyr::filter(!Open.Year %in% c(1995, 2001, 2003))
# good$Open.Year <- as.integer(good$Open.Year)
miss <- test_tbl_df_pred %>%
dplyr::filter(Open.Year %in% c(1995, 2001, 2003))
miss$Open.Year <- sapply(miss$Open.Year, FUN = factor_change)
test_tbl_df_pred_year_fixed <- rbind(good, miss)
# test_tbl_df_pred_year_fixed$Open.Year <- as.factor(test_tbl_df_pred_year_fixed$Open.Year)
test_tbl_df_pred <- test_tbl_df
factor_change <- function(f) {
if (f == '1995') {
return(factor('1996'))
}
if (f == '2001') {
return(factor('2002'))
}
if (f == '2003') {
return(factor('2004'))
}
}
good <- test_tbl_df_pred %>%
dplyr::filter(!Open.Year %in% c(1995, 2001, 2003))
# good$Open.Year <- as.integer(good$Open.Year)
miss <- test_tbl_df_pred %>%
dplyr::filter(Open.Year %in% c(1995, 2001, 2003))
miss$Open.Year <- sapply(miss$Open.Year, FUN = factor_change)
test_tbl_df_pred_year_fixed <- rbind(good, miss)
# test_tbl_df_pred_year_fixed$Open.Year <- as.factor(test_tbl_df_pred_year_fixed$Open.Year)
submission <- predict(rf.100, newdata = test_tbl_df_pred_year_fixed)
str(test_tbl_df_pred_year_fixed)
str(train_df_wo_3_outliers)
factor_change <- function(f) {
if (f == '1995') {
return(factor('1996'))
}
if (f == '2001') {
return(factor('2002'))
}
if (f == '2003') {
return(factor('2004'))
}
}
good <- test_tbl_df_pred %>%
dplyr::filter(!Open.Year %in% c(1995, 2001, 2003))
# good$Open.Year <- as.integer(good$Open.Year)
miss <- test_tbl_df_pred %>%
dplyr::filter(Open.Year %in% c(1995, 2001, 2003))
miss$Open.Year <- sapply(miss$Open.Year, FUN = factor_change)
test_tbl_df_pred_year_fixed <- rbind(good, miss)
# test_tbl_df_pred_year_fixed$Open.Year <- as.factor(test_tbl_df_pred_year_fixed$Open.Year)
str(test_tbl_df_pred_year_fixed)
test_df2 <- read.csv('test_fixed_year.csv')
str(test_df2)
colnames(test_df2)[-1]
colnames(test_df2)[end]
colnames(test_df2)[-2]
colnames(test_df2)
colnames(test_df2)[43]
colnames(test_df2)[43] <- 'Open.Year'
test_df2$Open.Date <- mdy(test_df$Open.Date)
test_df2$Open.Date <- mdy(test_df2$Open.Date)
test_df2$Open.Date <- lubridate::mdy(test_df2$Open.Date)
test_df2$Open.Date <- as.character(test_df2$Open.Date)
test_df2$Open.Date <- lubridate::mdy(test_df2$Open.Date)
test_df2 <- read.csv('test_fixed_year.csv')
str(test_df2)
test_df2$Open.Year <- as.factor(test_df2$Open.Year)
test_df2$Open.Month <- as.factor(test_df2$Open.Month)
test_df2 <- test_df2 %>%
dplyr::mutate(
City2 = ifelse(test = City.Group == 'Big Cities', yes = as.character(City), no = 0))
str(test_df2)
test_df$City2 <- as.factor(test_df$City2)
str(test_df2)
test_df2$City2 <- as.factor(test_df2$City2)
str(test_df2)
submission <- predict(rf.100, newdata = test_df2)
submission <- predict(rf.100, newdata = test_df2[, -c(Open.Date)])
submission <- predict(rf.100, newdata = test_df2[, -c('Open.Date')])
submission <- predict(rf.100, newdata = test_df2[, -c('Open.Date', 'Id')])
test_df2_clean <- select(test_df2, -(Id:City.Group))
train_df_wo_3_outliers_clean <- select(train_df_wo_3_outliers, -(Id:City.Group))
str(train_df_wo_3_outliers_clean)
str(test_df2_clean)
levels(test_df2_clean$Type)
test_df2 <- read.csv('test_fixed_year.csv')
test_df2$Open.Year <- as.factor(test_df2$Open.Year)
test_df2$Open.Month <- as.factor(test_df2$Open.Month)
test_df2 <- test_df2 %>%
dplyr::mutate(
City2 = ifelse(test = City.Group == 'Big Cities', yes = as.character(City), no = 0))
test_df2$City2 <- as.factor(test_df2$City2)
str(test_df2)
test_df2_clean <- select(test_df2, -(Id:City.Group))
str(test_df2_clean)
rf.train.clean <- randomForest(revenue ~ ., data=train_df_wo_3_outliers_clean, importance = TRUE)
submission <- predict(rf.train.clean, newdata = test_df2_clean)
submission_df <- data.frame(Id = 0:99999, Prediction=submission)
write.csv(submission_df, file='submission_rf.csv', row.names=FALSE, quote=FALSE)
savehistory("~/follow-m/Restaurant_R/my_history.Rhistory")
